#!/usr/bin/env python
#-*- coding:utf-8 -*-

"""
Created on 2015-10-17
@author: li.weiping
GIT_DIR/hooks/post-receive-email钩子的实现
设定项目更新后的通知邮件
"""

import sys
import os
import smtplib
#多个MIME对象的集合
from email.mime.multipart import MIMEMultipart
#MIME文本对象
from email.mime.text import MIMEText
from email.header import Header
import time
import commands
import sqlite3
from ConfigParser import ConfigParser


def send_mail(config_parser, to_list=[], sub='', content='', appendix_file=''):
    """"send_mail("aaa@163.com","sub","content")
    :param to_list:发给谁
    :param sub:主题
    :param content:内容
    :param appendix_file: 附件
    """

    #设置服务器、用户名、口令及邮箱的后缀
    mail_host = config_parser.get("email", "host").strip("'")
    mail_user = config_parser.get("email", "username").strip("'")
    mail_pass = config_parser.get("email", "password").strip("'")
    sender = config_parser.get("email", "sender").strip("'")
    #mail_host = "smtp.tinno.com"
    #mail_user = "li.weiping@tinno.com"
    #mail_pass = "xxxxxx"
    #sender = "li.weiping@tinno.com"
    msg_root = MIMEMultipart()
    #解决中文乱码
    att_text = MIMEText(content, 'html', 'UTF-8')
    #添加邮件正文
    msg_root.attach(att_text)

     #发件人
    msg_root['from'] = sender
    #邮件标题
    msg_root['Subject'] = Header(sub, 'utf-8')
    #设置时间
    msg_root['Date'] = time.ctime(time.time())
    msg_root['To'] = ';'.join(to_list)

    #构造附件(附件路径出现中文，会提示编码错误)
    if appendix_file != '':
        rar_file_path = appendix_file
        att = MIMEText(open(rar_file_path, 'rb').read(), 'gbk', 'UTF-8')
        att['Content-Type'] = 'application/octet-stream;name=%s' % Header(rar_file_path, 'UTF-8')
        att['Content-Disposition'] = 'attachment;filename=%s' % Header(rar_file_path, 'UTF-8')
        msg_root.attach(att)

    #群发邮件
    smtp = smtplib.SMTP(mail_host, 25)
    smtp.login(mail_user, mail_pass)

    smtp.sendmail(sender, to_list, msg_root.as_string())
    #休眠5秒
    time.sleep(5)
    #断开与服务器的连接
    smtp.quit()


def get_commit_info(git_path='', old_rev='', new_rev=''):
    """生成两个commit之间所有提交的日志信息
    :param git_path: 仓库路径
    :param new_rev: 旧的Commit Id
    :param new_rev: 新的Commit Id
    """

    result = []
    status, commit_info = commands.getstatusoutput('git --git-dir=%s log -p %s..%s' % (git_path, old_rev, new_rev))
    if status:
        return False, commit_info
    else:
        commit_info = commit_info.replace('<', '&lt;')
        lines = commit_info.split('\n')
        short_info = False
        if len(lines) < 2000:
            for tmp_line in lines:
                if tmp_line.startswith('-'):
                    tmp_line = '<font color="red">'+tmp_line+'</font>'
                elif tmp_line.startswith('+'):
                    tmp_line = '<font color="green">'+tmp_line+'</font>'
                result.append(tmp_line)
        else:
            status, commit_info = commands.getstatusoutput('git --git-dir=%s log --name-status %s..%s' %
                                                           (git_path, old_rev, new_rev))
            if status:
                return False, commit_info
            else:
                commit_info = commit_info.replace('<', '&lt;')
                result = commit_info.split('\n')
                short_info = True

        return True, short_info, '<br/>'.join(result)


def get_commit_notice_email_list(config_parser, git_path='', tag_name='', db_name='', repositories=''):
    """
        获取项目的设置信息
    """
    email_address_list = ''
    try:
	#查找平台的配置
	platform_name = git_path.split(repositories)[1]
        conn = sqlite3.connect(db_name)
	cursor = conn.cursor()
	#数据库中的仓库名 + "___" + 分支名，支持分支管理邮箱地址
	project_tag = os.path.basename(platform_name) + '___' + tag_name
	#print project_tag
        #具体仓库的配置
        repository_query_sql = 'SELECT mail_list FROM project_config WHERE project_tag="%s" ' % \
                               (project_tag)
        cursor.execute(repository_query_sql)
        email_address_list = cursor.fetchone()
	#print email_address_list
        if email_address_list:
            email_address_list = email_address_list[0]
        cursor.close()
        conn.close()
    except sqlite3.Error, e:
	#print e
        send_mail(config_parser, ["li.weiping@tinno.com"], "提交的邮件通知发送失败", '连接Tup数据库失败')

    return email_address_list


def repository_push_log(config_parser, repo_path='', reference='', old_rev='', new_rev='', db_name=''):
    """
	推送日志记入数据库中便于tsds解析
    """

    date_format = '%Y-%m-%d %H:%M:%S'
    now = time.strftime(date_format, time.localtime())
    try:
        conn = sqlite.connect(db_name)
        cursor = conn.cursor()
        sql = "insert into repository_push_log set repository_path='%s',reference='%s',status=0," \
              "create_time='%s',old_revision='%s',new_revision='%s'" \
              % (repo_path, reference, now, old_rev, new_rev)

        cursor.execute(sql)
        conn.commit()
        cursor.close()
        conn.close()
    except sqlite.Error, e:
        send_mail(config_parser, ["li.weiping@tinno.com"], "Tup数据库记录Push history失败",
                  'Git服务器仓库路径:%s<br>git分支:%s<br>更新时间:%s' %
                  (repo_path, reference, now))


if __name__ == "__main__":
    """
        第一个参数是post-receive 钩子pwd命令获取的仓库目录
        第二个参数是新的commit id
        第三个参数是更新的tag名称
        第四个参数是sqlite3 db文件的具体路径
    """
    git_path = os.getcwd()
    #git_path = '/home/android/test.git'
    #print git_path
    argv = []
    for line in sys.stdin:
        line = line.strip()
        argv = line.split(' ')
    
    old_rev = argv[0].strip()
    new_rev = argv[1].strip()
    tag_name = argv[2].strip('\n')
    #old_rev = '9c1287a3cbb87cff82b126ffa339ba26ffe35f55'
    #new_rev = '354db5b7535d7ccdab51b74804305358e53f89f9'
    #tag_name = 'refs/heads/master'

    config_parser = ConfigParser()
    try:
    	config_parser.read(os.path.expanduser('~/git-serve.conf'))
        db_name = config_parser.get('database', 'db_name').strip("'")
        repositories = config_parser.get('repositories', 'repositories').strip("'")
    except IOError:
        config_parser = None
        db_name = '/home/git/emailconf.db'
        repositories = '/home/git/repositories/'

    #repository_push_log(config_parser, git_path, tag_name, old_rev, new_rev, localhost, hostname, db_name, username, password)
    notice_email_list = get_commit_notice_email_list(config_parser, git_path, tag_name, db_name, repositories)
    #print notice_email_list
    #notice_email_list = config_parser.get('email', 'mailinglist').strip("'")

    if notice_email_list:
        (result, short_info, commit_info) = get_commit_info(git_path, old_rev, new_rev)
        if result:
            git_path = git_path.split(repositories)[1]
            commit_info = '\n'.join([git_path, commit_info])
            title = os.path.basename(git_path) + '___' + tag_name+"___项目更新通知邮件"
            if short_info:
                title = tag_name+" ___项目更新通知邮件(简略信息)"

            send_mail(config_parser, str(notice_email_list).split(','), title, commit_info)
        else:
            send_mail(config_parser, ['li.weiping@tinno.com'],
                      os.path.basename(git_path) + '___' + tag_name+"___项目生成差异日志出错", short_info)

